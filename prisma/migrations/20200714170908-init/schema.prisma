// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model Group {
  id         String      @default(uuid()) @id
  name       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  dashboards Dashboard[] @relation(references: [id])
  users      User[]
}

model Dashboard {
  id        String    @default(uuid()) @id
  name      String    @unique
  groups     Group[]   @relation(references: [id])
  sections  Section[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  published Boolean   @default(false)
}

model User {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  email     String   @unique
  name      String?
  password  String
  group     Group?   @relation(fields: [groupId], references: [id])
  groupId   String?
}

model Section {
  id              String     @default(uuid()) @id
  name            String     @unique
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  published       Boolean    @default(false)
  order           Int?
  successCriteria String?
  dashboards      Dashboard? @relation(fields: [dashboardId], references: [id])
  dashboardId     String?
  steps           Step[]
}

model Step {
  id              String         @default(uuid()) @id
  name            String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  job             Job            @relation(fields: [jobId], references: [id])
  jobId           String
  order           Int?
  successCriteria String?
  journalEntries  JournalEntry[]
  section         Section        @relation(fields: [sectionId], references: [id])
  sectionId       String
}

model JournalEntry {
  id     String  @default(uuid()) @id
  entry  String?
  step   Step    @relation(fields: [stepId], references: [id])
  stepId String
  // author   User    @relation(fields: [authorId], references: [id])
  // authorId String
}

model Job {
  id        String   @default(uuid()) @id
  name      String   @unique
  joid      Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  runs      JobRun[]
  jobType   JobType? @default(AUTOSYS)
}

model JobRun {
  id        String     @default(uuid()) @id
  joid      Int?
  jobRunId  Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  startTime DateTime
  endTime   DateTime?
  status    JobStatus?
  job       Job        @relation(fields: [jobId], references: [id])
  jobId     String
  exitCode  Int?
  moreInfo  String?
}

enum JobStatus {
  RUNNING
  STARTING
  SUCCESS
  FAILURE
  TERMINATED
  ON_ICE
  INACTIVE
  ACTIVATED
  RESTART
  ON_HOLD
  QUE_WAIT
  WAIT_REPLY
  PEND_MACH
  RESWAIT
  ON_NOEXEC
}

enum JobType {
  AUTOSYS
  FMC
  DATABASE
  INSTRUMENTED
}

// model SectionsOnDashboards {
//   dashboard   Dashboard @relation(fields: [dashboardId], references: [id])
//   dashboardId String
//   section     Section   @relation(fields: [sectionId], references: [id])
//   sectionId   String
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   order       Int?
//   sla         Int?
//   alias       String?
//   @@id([sectionId, dashboardId])
// }
